.. contents::
   :depth: 3
..

查找最大最小元素
================

::

   #!/usr/bin/env python
   # -*- coding:utf8 -*-
   # auther; 18793
   # Date：2019/7/28 13:12
   # filename: 04. 查找最大或最小的 N 个元素.py
   import heapq

   nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]
   # 寻找列表中最大的3个数
   print(heapq.nlargest(3, nums))

   # 寻找列表中最小的3个数
   print(heapq.nsmallest(3, nums))

输出信息

::

   [42, 37, 23]
   [-4, 1, 2]

::

   portfolio = [
       {'name': 'IBM', 'shares': 100, 'price': 91.1},
       {'name': 'AAPL', 'shares': 50, 'price': 543.22},
       {'name': 'FB', 'shares': 200, 'price': 21.09},
       {'name': 'HPQ', 'shares': 35, 'price': 31.75},
       {'name': 'YHOO', 'shares': 45, 'price': 16.35},
       {'name': 'ACME', 'shares': 75, 'price': 115.65}
   ]
   cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])
   cheap2 = heapq.nlargest(3, portfolio, key=lambda s: s['price'])

   print(cheap)
   print(cheap2)

输出信息

::

   [{'shares': 45, 'name': 'YHOO', 'price': 16.35}, {'shares': 200, 'name': 'FB', 'price': 21.09}, {'shares': 35, 'name': 'HPQ', 'price': 31.75}]
   [{'shares': 50, 'name': 'AAPL', 'price': 543.22}, {'shares': 75, 'name': 'ACME', 'price': 115.65}, {'shares': 100, 'name': 'IBM', 'price': 91.1}]
