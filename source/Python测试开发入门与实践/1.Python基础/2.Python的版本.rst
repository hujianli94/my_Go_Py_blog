.. contents::
   :depth: 3
..

Python的版本
============

Python自诞生到现在已经30多年了，其官方发行了两个大的版本：Python
2和Python 3。Python 2已经在2020年停止官方的维护，本书以Python
3的较新版本作为示例演示。

1.Python2 与 Python3 的主要区别
-------------------------------

1.默认编码
~~~~~~~~~~

Python2 代码文件默认是\ ``ASCII``\ 编码；Python3
代码文件默认是\ ``UTF-8``\ 编码。

同样是字符串类型，在\ ``Python2``\ 代表的是经过编码后的\ ``bytes``\ 类型；而\ ``Python3``\ 中则是\ ``Unicode``\ 类型。

2.print函数
~~~~~~~~~~~

Python2 中\ ``print``\ 是语句；Python3 中\ ``print()``\ 是函数。

.. code:: python

   # Python2
   print 'hello Python'
   # Python 3
   print('hello Python')

3.True/False
~~~~~~~~~~~~

``Python2``\ 中\ ``True``\ 和\ ``False``\ 并不是保留字而是全局变量，因此我们甚至可以在编程时改变其值。

当然这就会非常的危险。

``Python3``\ 中自然就解决了这个隐患，\ ``True``\ 和\ ``False``\ 正式被作为保留字，且其值也不再可以被更改。

4.nonlocal
~~~~~~~~~~

``Python3``\ 中引入的新的保留字，其作用与\ ``global``\ 保留字有类型的作用。
所不同的是\ ``global``\ 是引入全局的变量来替代局部变量；\ ``nonlocal``\ 则引入全局与局部之间的变量来替代局部变量。

.. code:: python

   # global demo
   j = 1
   def foo():
       j = 2
       def bar():
           global j
           j += 1
       bar()
       print(j)    # 2
       
   foo()

.. code:: python

   # nonlocal demo
   j = 1
   def foo():
       j = 2
       def bar():
           nonlocal j
           j += 1
       bar()
       print(j)    # 3
       
   foo()

5.异常捕获
~~~~~~~~~~

异常捕获的差异仅仅体现在语法上的变化。由原来的

.. code:: python

   # Python2
   try:
       1 / 0
   except Exception, e:
       pass

改为

.. code:: python

   # Python3
   try:
       1 / 0
   except Exception as e:
       pass

6.除法运算符
~~~~~~~~~~~~

``Python``\ 中有2种除法运算符。

1. /：普通除法
2. //：地板除，即取整除法，不保留小数部分

``Python3``\ 中的改变只针对普通除法。把普通除法与地板除的功能分的非常明确。

::

   # Python2
   3 / 2       # 1
   3 / 2.0     # 1.5

``Python3``\ 中普通除法不再具备地板除的能力。

::

   # Python3
   3 / 2       # 1.5
   3 / 2.0     # 1.5

7.range函数
~~~~~~~~~~~

``Python3``\ 中\ ``range``\ 函数等同于\ ``Python2``\ 中的\ ``xrange``\ 。而\ ``Python2``\ 中存在的\ ``xrange``\ 则直接在\ ``Python3``\ 中被移除掉。

8.input函数
~~~~~~~~~~~

``Python3``\ 中\ ``input``\ 函数等同于\ ``Python2``\ 中的\ ``raw_input``\ 。而\ ``Python2``\ 中存在的\ ``raw_input``\ 则直接在\ ``Python3``\ 中被移除掉。

9.file函数
~~~~~~~~~~

``Python2``\ 中存在的\ ``file``\ 在\ ``Python3``\ 中被移除掉，仅保留\ ``open``\ 函数用于文件的读写操作。

10.<>运算服务
~~~~~~~~~~~~~

``Python2``\ 中存在的\ ``<>``\ 在\ ``Python3``\ 中被移除掉，仅保留\ ``!=``\ 用于操作数之间的不等于比较。

11.``表达式
~~~~~~~~~~~

``Python2``\ 中存在的\`\ ``在``\ Python3\ ``中被移除掉，仅保留``\ repr`函数用于显示字符串的源信息。

12.long类型
~~~~~~~~~~~

``Python2``\ 中存在的\ ``long``\ 在\ ``Python3``\ 中被移除掉，仅保留\ ``int``\ 代表int、long类型。

13.double类型
~~~~~~~~~~~~~

``Python2``\ 中存在的\ ``double``\ 在\ ``Python3``\ 中被移除掉，仅保留\ ``float``\ 代表float、double类型。

2.公开发行版本
--------------

除了官方发行的Python版本（CPython），还有很多其他的公开发行版本。具体的发行版本列表如下。

-  PyPy——JIT版本的Python发行版。
-  Jython——运行于JVM之上的Python发行版。
-  IronPython——运行于.NET之上的Python发行版。
-  Anaconda——专用于科学计算、数据分析、机器学习的发行版。
-  ActivePython——专用于科学计算的Python发行版。

这些发行版本主要解决特定场景的需求，本书所采用的是官方发行的CPython版本。
